
scalar Date


enum Track {
  se
  ai
  pm
  ixd
  ac
  pmc
}


type Document {
  bucket: String
  name: String
}

type Applicant {
  id: String!
  name: String!
  batch: Int!
  track: String! 
  email: String!
  cv: Document!
  consent: String!
  scholarship: String
  coverLetter: Document
  source: String
  gender: String
}

type User {
 uid: String!
 name: String! 
 email: String!
 photo: String!
}


type Batch {
  batch: Int!
  startDate: Date!
  endDate: Date!
  appStartDate: Date!
  appEndDate: Date!
  appEndDateAI: Date!
  appEndDateIXD: Date!
  appEndDatePM: Date!
  appEndDateSE: Date!
}

type Exception {
  code: Int
  message: String
}

type ApplicantList {
  list: [Applicant!]
}

type BatchList {
  list: [Batch!]
}


type Status {
  code: String
  message: String
}


union ApplicantsQueryResult = ApplicantList | Exception
union ApplicantDetailsQueryResult = Applicant | Exception
union BatchesQueryResult = BatchList | Exception
union RateMutationResult = Status | Exception




type Query {
  applicants(batch_id: Int!): ApplicantsQueryResult
  applicantDetails(batch_id: Int!, applicant_id: String!): ApplicantDetailsQueryResult
  batches(batch_id: Int): BatchesQueryResult
  applicantsFromTrack(batch_id: Int!, track: Track!): ApplicantsQueryResult
  user: User
}

type Mutation {
  rate(batch_id: Int!, applicant_id: String!, score: Int!): RateMutationResult
}