
scalar Date

type Document {
  bucket: String
  name: String
}

type Applicant {
  name: String!
  batch: Int!
  track: String! 
  email: String!
  cv: Document!
  consent: String!
  scholarship: String
  coverLetter: Document
  source: String
  gender: String
}

type Batch {
  batch: Int!
  startDate: Date!
  endDate: Date!
  appStartDate: Date!
  appEndDate: Date!
  appEndDateAI: Date!
  appEndDateIXD: Date!
  appEndDatePM: Date!
  appEndDateSE: Date!
}

type AuthenticationException {
  code: Int
  message: String
}

type ApplicantList {
  list: [Applicant!]
}

type BatchList {
  list: [Batch!]
}

union ApplicantsQueryResult = ApplicantList | AuthenticationException
union ApplicantDetailsQueryResult = Applicant | AuthenticationException
union BatchesQueryResult = BatchList | AuthenticationException


type Query {
  applicants(batch_id: Int!): ApplicantsQueryResult
  applicantDetails(batch_id: Int!, applicant_id: String!): ApplicantDetailsQueryResult
  batches(batch_id: Int): BatchesQueryResult
}
